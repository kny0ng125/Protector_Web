{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\Mainpage\\\\PatientItem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { AuthContext } from '../AuthContext';\nimport API_BASE_URL from '../Config';\nimport './PatientItem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientItem = ({\n  patient\n}) => {\n  _s();\n  const {\n    authFetch\n  } = useContext(AuthContext);\n  const [isFavorite, setIsFavorite] = useState(false);\n\n  // 환자의 즐겨찾기 여부를 불러오는 함수\n  const fetchFavoriteStatus = async () => {\n    try {\n      const response = await authFetch(`${API_BASE_URL}/doctor/patient/favorite/${patient.id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': `application/json` // 필요 시 토큰 추가\n        }\n      });\n      if (response.status === 200) {\n        const favoriteStatus = response.data;\n        setIsFavorite(favoriteStatus === 'FAVORITE'); // API의 응답에 따라 상태를 설정합니다.\n      } else {\n        console.error('Failed to fetch favorite status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching favorite status:', error);\n    }\n  };\n  useEffect(() => {\n    fetchFavoriteStatus(); // 컴포넌트 마운트 시 즐겨찾기 상태를 확인합니다.\n  }, [patient.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: patient.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: isFavorite ? '⭐' : '☆'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientItem, \"Ya7N26Yd+E8xPNKXS27PNF3s9yw=\");\n_c = PatientItem;\nexport default PatientItem;\nvar _c;\n$RefreshReg$(_c, \"PatientItem\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","API_BASE_URL","jsxDEV","_jsxDEV","PatientItem","patient","_s","authFetch","isFavorite","setIsFavorite","fetchFavoriteStatus","response","id","method","headers","status","favoriteStatus","data","console","error","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Mainpage/PatientItem.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { AuthContext } from '../AuthContext';\r\nimport API_BASE_URL from '../Config';\r\nimport './PatientItem.css';\r\n\r\nconst PatientItem = ({ patient }) => {\r\n  const { authFetch } = useContext(AuthContext);\r\n  const [isFavorite, setIsFavorite] = useState(false);\r\n\r\n  // 환자의 즐겨찾기 여부를 불러오는 함수\r\n  const fetchFavoriteStatus = async () => {\r\n    try {\r\n      const response = await authFetch(`${API_BASE_URL}/doctor/patient/favorite/${patient.id}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': `application/json` // 필요 시 토큰 추가\r\n        }\r\n      })\r\n      if (response.status === 200) {\r\n        const favoriteStatus = response.data;\r\n        setIsFavorite(favoriteStatus === 'FAVORITE'); // API의 응답에 따라 상태를 설정합니다.\r\n      } else {\r\n        console.error('Failed to fetch favorite status:', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching favorite status:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFavoriteStatus(); // 컴포넌트 마운트 시 즐겨찾기 상태를 확인합니다.\r\n  }, [patient.id]);\r\n\r\n  return (\r\n    <div className=\"patient-item\">\r\n      <p>{patient.name}</p>\r\n      <span>{isFavorite ? '⭐' : '☆'}</span> {/* 즐겨찾기 상태에 따라 아이콘을 표시 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientItem;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,YAAY,MAAM,WAAW;AACpC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAU,CAAC,GAAGR,UAAU,CAACC,WAAW,CAAC;EAC7C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,GAAGN,YAAY,4BAA4BI,OAAO,CAACO,EAAE,EAAE,EAAE;QACxFC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB,CAAC;QACrC;MACF,CAAC,CAAC;MACF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,cAAc,GAAGL,QAAQ,CAACM,IAAI;QACpCR,aAAa,CAACO,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;MAChD,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAER,QAAQ,CAACI,MAAM,CAAC;MACpE;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACda,mBAAmB,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,CAACL,OAAO,CAACO,EAAE,CAAC,CAAC;EAEhB,oBACET,OAAA;IAAKiB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BlB,OAAA;MAAAkB,QAAA,EAAIhB,OAAO,CAACiB;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBvB,OAAA;MAAAkB,QAAA,EAAOb,UAAU,GAAG,GAAG,GAAG;IAAG;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAACpB,EAAA,CAlCIF,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAoCjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}