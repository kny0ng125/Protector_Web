{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\Patient_Info\\\\HealthInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API_BASE_URL from '../Config';\nimport { AuthContext } from '../AuthContext'; // AuthContext를 가져옵니다.\nimport PatientInfo from './PatientInfo';\nimport Calendar from './Calendar';\nimport SearchAndList from './SearchAndList';\nimport HealthCharts from './HealthCharts';\nimport './HealthInfoPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthInfoPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 환자 id를 가져옵니다.\n  const {\n    authFetch\n  } = useContext(AuthContext); // authFetch 함수를 AuthContext에서 가져옵니다.\n  const [patientData, setPatientData] = useState(null); // 환자 데이터를 저장할 상태를 정의합니다.\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // id를 사용하여 API 호출을 통해 환자 데이터를 가져옵니다.\n    const fetchPatientData = async () => {\n      try {\n        const response = await authFetch(`${API_BASE_URL}/doctor/patient/${id}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          setPatientData(response.data); // 받아온 환자 데이터를 상태에 저장합니다.\n        } else {\n          console.error('Error fetching patient data:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPatientData();\n  }, [id, authFetch]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  if (!patientData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uD658\\uC790 \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uC9C0 \\uBABB\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"health-info-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: [/*#__PURE__*/_jsxDEV(PatientInfo, {\n        patient: patientData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Calendar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchAndList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HealthCharts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthInfoPage, \"+6OaycCuSBQ3cKSAUQfPuAcTwiY=\", false, function () {\n  return [useParams];\n});\n_c = HealthInfoPage;\nexport default HealthInfoPage;\nvar _c;\n$RefreshReg$(_c, \"HealthInfoPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","API_BASE_URL","AuthContext","PatientInfo","Calendar","SearchAndList","HealthCharts","jsxDEV","_jsxDEV","HealthInfoPage","_s","id","authFetch","patientData","setPatientData","loading","setLoading","fetchPatientData","response","method","headers","status","data","console","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","patient","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Patient_Info/HealthInfoPage.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport API_BASE_URL from '../Config';\r\nimport { AuthContext } from '../AuthContext'; // AuthContext를 가져옵니다.\r\nimport PatientInfo from './PatientInfo';\r\nimport Calendar from './Calendar';\r\nimport SearchAndList from './SearchAndList';\r\nimport HealthCharts from './HealthCharts';\r\nimport './HealthInfoPage.css';\r\n\r\nconst HealthInfoPage = () => {\r\n  const { id } = useParams(); // URL에서 환자 id를 가져옵니다.\r\n  const { authFetch } = useContext(AuthContext); // authFetch 함수를 AuthContext에서 가져옵니다.\r\n  const [patientData, setPatientData] = useState(null); // 환자 데이터를 저장할 상태를 정의합니다.\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // id를 사용하여 API 호출을 통해 환자 데이터를 가져옵니다.\r\n    const fetchPatientData = async () => {\r\n      try {\r\n        const response = await authFetch(`${API_BASE_URL}/doctor/patient/${id}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        if (response.status === 200) {\r\n          setPatientData(response.data); // 받아온 환자 데이터를 상태에 저장합니다.\r\n        } else {\r\n          console.error('Error fetching patient data:', response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching patient data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPatientData();\r\n  }, [id, authFetch]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (!patientData) {\r\n    return <p>환자 데이터를 불러오지 못했습니다.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"health-info-page\">\r\n      <div className=\"top-section\">\r\n        <PatientInfo patient={patientData} /> {/* 환자 데이터를 전달합니다. */}\r\n        <Calendar />\r\n        <SearchAndList />\r\n      </div>\r\n      <HealthCharts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthInfoPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}