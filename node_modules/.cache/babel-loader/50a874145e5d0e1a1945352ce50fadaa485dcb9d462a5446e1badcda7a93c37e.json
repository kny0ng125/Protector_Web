{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport API_BASE_URL from './Config';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('accessToken'));\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken'));\n  useEffect(() => {\n    const storedRefreshToken = localStorage.getItem('refreshToken');\n    if (storedRefreshToken) {\n      setRefreshToken(storedRefreshToken);\n    }\n  }, []);\n  const login = (accessToken, refreshToken) => {\n    setAccessToken(accessToken);\n    setRefreshToken(refreshToken);\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    setIsAuthenticated(true);\n  };\n  const logout = message => {\n    setAccessToken(null);\n    setRefreshToken(null);\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    setIsAuthenticated(false);\n  };\n  const refreshAccessToken = async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/doctor/reissue`, {\n        refreshToken: refreshToken\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'ngrok-skip-browser-warning': '69420',\n          'cookie': `refresh-token=${refreshToken}`\n        },\n        withCredentials: true // 쿠키 전송을 위해 withCredentials 설정\n      });\n      if (response.status === 201) {\n        const newAccessToken = response.data.accessToken;\n        const newRefreshToken = response.data.refreshToken;\n\n        // 갱신된 토큰들을 설정\n        setAccessToken(newAccessToken);\n        setRefreshToken(newRefreshToken);\n        localStorage.setItem('accessToken', newAccessToken);\n        localStorage.setItem('refreshToken', newRefreshToken);\n        return newAccessToken;\n      } else {\n        logout('세션이 만료되어 로그아웃되었습니다. 다시 로그인해주세요.'); // 로그아웃 및 알림\n      }\n    } catch (error) {\n      console.error('Error refreshing access token:', error);\n      logout('세션이 만료되어 로그아웃되었습니다. 다시 로그인해주세요.'); // 오류 발생 시 로그아웃 및 알림\n    }\n    return null;\n  };\n  const authFetch = async (url, options = {}) => {\n    if (!options.headers) {\n      options.headers = {};\n    }\n    options.headers['Authorization'] = `Bearer ${accessToken}`;\n    try {\n      var _response$data;\n      let response = await axios(url, options);\n\n      // \"유효하지 않은 토큰입니다.\" 메시지를 검사\n      if (response.status === 400 || ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) === '유효하지 않은 토큰입니다.') {\n        const newToken = await refreshAccessToken();\n        if (newToken) {\n          options.headers['Authorization'] = `Bearer ${newToken}`;\n          response = await axios(url, options);\n        } else {\n          logout('세션이 만료되어 로그아웃되었습니다. 다시 로그인해주세요.'); // 재발급 실패 시 로그아웃 처리 및 알림\n        }\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in authFetch:', error);\n      return error.response;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      authFetch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"O3F/ECXE0IwSQ1fpUgrs61w2bWI=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","API_BASE_URL","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","localStorage","getItem","accessToken","setAccessToken","refreshToken","setRefreshToken","storedRefreshToken","login","setItem","logout","message","removeItem","refreshAccessToken","response","post","headers","withCredentials","status","newAccessToken","data","newRefreshToken","error","console","authFetch","url","options","_response$data","newToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport API_BASE_URL from './Config';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('accessToken'));\r\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\r\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken'));\r\n\r\n  useEffect(() => {\r\n    const storedRefreshToken = localStorage.getItem('refreshToken');\r\n    if (storedRefreshToken) {\r\n      setRefreshToken(storedRefreshToken);\r\n    }\r\n  }, []);\r\n\r\n  const login = (accessToken, refreshToken) => {\r\n    setAccessToken(accessToken);\r\n    setRefreshToken(refreshToken);\r\n    localStorage.setItem('accessToken', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const logout = (message) => {\r\n    setAccessToken(null);\r\n    setRefreshToken(null);\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const refreshAccessToken = async () => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/doctor/reissue`, {\r\n        refreshToken: refreshToken\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'ngrok-skip-browser-warning': '69420',\r\n          'cookie': `refresh-token=${refreshToken}`\r\n        },\r\n        withCredentials: true, // 쿠키 전송을 위해 withCredentials 설정\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        const newAccessToken = response.data.accessToken;\r\n        const newRefreshToken = response.data.refreshToken;\r\n\r\n        // 갱신된 토큰들을 설정\r\n        setAccessToken(newAccessToken);\r\n        setRefreshToken(newRefreshToken);\r\n        localStorage.setItem('accessToken', newAccessToken);\r\n        localStorage.setItem('refreshToken', newRefreshToken);\r\n\r\n        return newAccessToken;\r\n      } else {\r\n        logout('세션이 만료되어 로그아웃되었습니다. 다시 로그인해주세요.'); // 로그아웃 및 알림\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing access token:', error);\r\n      logout('세션이 만료되어 로그아웃되었습니다. 다시 로그인해주세요.'); // 오류 발생 시 로그아웃 및 알림\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const authFetch = async (url, options = {}) => {\r\n    if (!options.headers) {\r\n      options.headers = {};\r\n    }\r\n\r\n    options.headers['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n    try {\r\n      let response = await axios(url, options);\r\n\r\n      // \"유효하지 않은 토큰입니다.\" 메시지를 검사\r\n      if (response.status === 400 || response.data?.message === '유효하지 않은 토큰입니다.') {\r\n        const newToken = await refreshAccessToken();\r\n        if (newToken) {\r\n          options.headers['Authorization'] = `Bearer ${newToken}`;\r\n          response = await axios(url, options);\r\n        } else {\r\n          logout('세션이 만료되어 로그아웃되었습니다. 다시 로그인해주세요.'); // 재발급 실패 시 로그아웃 처리 및 알림\r\n        }\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error in authFetch:', error);\r\n      return error.response;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, login, logout, authFetch }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}