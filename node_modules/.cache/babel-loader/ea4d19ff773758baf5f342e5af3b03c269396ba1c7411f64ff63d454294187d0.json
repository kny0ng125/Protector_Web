{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\Chart\\\\TripleChart.js\";\n// HeartRateChart.js\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst TripleChart = ({\n  heartRateData\n}) => {\n  if (!heartRateData || !heartRateData.content) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n  const labels = heartRateData.content.map(item => item.startAt);\n  const minData = heartRateData.content.map(item => item.minimum);\n  const maxData = heartRateData.content.map(item => item.maximum);\n  const avgData = heartRateData.content.map(item => item.average);\n  const lineData = {\n    labels,\n    datasets: [{\n      label: 'Minimum Heart Rate',\n      data: minData,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 2,\n      fill: false,\n      tension: 0.1\n    }, {\n      label: 'Maximum Heart Rate',\n      data: maxData,\n      borderColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 2,\n      fill: false,\n      tension: 0.1\n    }, {\n      label: 'Average Heart Rate',\n      data: avgData,\n      borderColor: 'rgba(54, 162, 235, 1)',\n      borderWidth: 2,\n      fill: false,\n      tension: 0.1\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Heart Rate Over Time'\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'day',\n          displayFormats: {\n            day: 'MM/DD'\n          }\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Heart Rate (bpm)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: lineData,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 14\n  }, this);\n};\n_c = TripleChart;\nexport default TripleChart;\nvar _c;\n$RefreshReg$(_c, \"TripleChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","TripleChart","heartRateData","content","children","fileName","_jsxFileName","lineNumber","columnNumber","labels","map","item","startAt","minData","minimum","maxData","maximum","avgData","average","lineData","datasets","label","data","borderColor","borderWidth","fill","tension","options","responsive","plugins","legend","position","title","display","text","scales","x","type","time","unit","displayFormats","day","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Chart/TripleChart.js"],"sourcesContent":["// HeartRateChart.js\r\nimport React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst TripleChart = ({ heartRateData }) => {\r\n    if (!heartRateData || !heartRateData.content) {\r\n        return <p>데이터를 불러오는 중입니다...</p>;\r\n      }\r\n    \r\n      const labels = heartRateData.content.map(item => item.startAt);\r\n      const minData = heartRateData.content.map(item => item.minimum);\r\n      const maxData = heartRateData.content.map(item => item.maximum);\r\n      const avgData = heartRateData.content.map(item => item.average);\r\n    \r\n      const lineData = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: 'Minimum Heart Rate',\r\n            data: minData,\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1,\r\n          },\r\n          {\r\n            label: 'Maximum Heart Rate',\r\n            data: maxData,\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1,\r\n          },\r\n          {\r\n            label: 'Average Heart Rate',\r\n            data: avgData,\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1,\r\n          },\r\n        ],\r\n      };\r\n    \r\n      const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Heart Rate Over Time',\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            time: {\r\n              unit: 'day',\r\n              displayFormats: {\r\n                day: 'MM/DD',\r\n              },\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Heart Rate (bpm)',\r\n            },\r\n          },\r\n        },\r\n      };\r\n    \r\n      return <Line data={lineData} options={options} />;\r\n    };\r\nexport default TripleChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}