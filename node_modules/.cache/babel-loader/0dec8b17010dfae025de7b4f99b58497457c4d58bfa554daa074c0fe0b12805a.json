{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\Patient_Info\\\\HealthCharts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { AuthContext } from '../AuthContext';\nimport API_BASE_URL from '../Config';\nimport ECGChart from '../Chart/ECGChart'; // 차트를 그리는 컴포넌트\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthInfoPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 환자 id를 가져옵니다.\n  const {\n    authFetch\n  } = useContext(AuthContext);\n  const [ecgData, setEcgData] = useState(null);\n  const [hrvData, setHrvData] = useState(null);\n  const [rrData, setRrData] = useState(null);\n  const [dailyAverage, setDailyAverage] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [metricPeriod, setMetricPeriod] = useState('LAST_MONTH'); // 기본 기간을 LAST_MONTH로 설정\n\n  // 데이터 호출을 위한 통합 함수\n  const fetchMeasurementData = async (measurementType, setDataCallback) => {\n    try {\n      const response = await authFetch(`${API_BASE_URL}/doctor/${measurementType}/${id}?page=&size=&metricPeriod=${metricPeriod}`,\n      // 동적 API 호출\n      {\n        method: 'GET'\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setDataCallback(data[`${measurementType}List`]); // 해당 데이터 설정\n        if (measurementType === 'ecg') {\n          setDailyAverage(data.dailyAverage); // ECG 데이터일 경우 일일 평균도 설정\n        }\n      } else {\n        console.error(`Failed to fetch ${measurementType} data:`, response.statusText);\n      }\n    } catch (error) {\n      console.error(`Error fetching ${measurementType} data:`, error);\n    } finally {\n      setLoading(false); // 로딩 완료\n    }\n  };\n\n  // 각 데이터 호출 함수\n  useEffect(() => {\n    fetchMeasurementData('ecg', setEcgData);\n    fetchMeasurementData('hrv', setHrvData);\n    fetchMeasurementData('rr', setRrData);\n  }, [id, authFetch, metricPeriod]); // metricPeriod가 변경될 때마다 재호출\n\n  // metricPeriod 선택 핸들러\n  const handleMetricPeriodChange = event => {\n    setMetricPeriod(event.target.value);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"health-info-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD658\\uC790 \\uC2EC\\uC804\\uB3C4, HRV, RR \\uB370\\uC774\\uD130\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uAE30\\uAC04 \\uC120\\uD0DD: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: metricPeriod,\n          onChange: handleMetricPeriodChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAST_WEEK\",\n            children: \"\\uC9C0\\uB09C \\uC8FC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAST_MONTH\",\n            children: \"\\uC9C0\\uB09C \\uB2EC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAST_THREE_MONTHS\",\n            children: \"\\uC9C0\\uB09C \\uC138 \\uB2EC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ECGChart, {\n        ecgData: ecgData,\n        dailyAverage: dailyAverage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthInfoPage, \"mmA2kTGTQ3xzZ2oVnfNov/6mouU=\", false, function () {\n  return [useParams];\n});\n_c = HealthInfoPage;\nexport default HealthInfoPage;\nvar _c;\n$RefreshReg$(_c, \"HealthInfoPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","API_BASE_URL","ECGChart","useParams","jsxDEV","_jsxDEV","HealthInfoPage","_s","id","authFetch","ecgData","setEcgData","hrvData","setHrvData","rrData","setRrData","dailyAverage","setDailyAverage","loading","setLoading","metricPeriod","setMetricPeriod","fetchMeasurementData","measurementType","setDataCallback","response","method","status","data","console","error","statusText","handleMetricPeriodChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Patient_Info/HealthCharts.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { AuthContext } from '../AuthContext';\r\nimport API_BASE_URL from '../Config';\r\nimport ECGChart from '../Chart/ECGChart'; // 차트를 그리는 컴포넌트\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst HealthInfoPage = () => {\r\n  const { id } = useParams(); // URL에서 환자 id를 가져옵니다.\r\n  const { authFetch } = useContext(AuthContext);\r\n  const [ecgData, setEcgData] = useState(null);\r\n  const [hrvData, setHrvData] = useState(null);\r\n  const [rrData, setRrData] = useState(null);\r\n  const [dailyAverage, setDailyAverage] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [metricPeriod, setMetricPeriod] = useState('LAST_MONTH'); // 기본 기간을 LAST_MONTH로 설정\r\n\r\n  // 데이터 호출을 위한 통합 함수\r\n  const fetchMeasurementData = async (measurementType, setDataCallback) => {\r\n    try {\r\n      const response = await authFetch(\r\n        `${API_BASE_URL}/doctor/${measurementType}/${id}?page=&size=&metricPeriod=${metricPeriod}`, // 동적 API 호출\r\n        {\r\n          method: 'GET',\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const data = response.data;\r\n        setDataCallback(data[`${measurementType}List`]); // 해당 데이터 설정\r\n        if (measurementType === 'ecg') {\r\n          setDailyAverage(data.dailyAverage); // ECG 데이터일 경우 일일 평균도 설정\r\n        }\r\n      } else {\r\n        console.error(`Failed to fetch ${measurementType} data:`, response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching ${measurementType} data:`, error);\r\n    } finally {\r\n      setLoading(false); // 로딩 완료\r\n    }\r\n  };\r\n\r\n  // 각 데이터 호출 함수\r\n  useEffect(() => {\r\n    fetchMeasurementData('ecg', setEcgData);\r\n    fetchMeasurementData('hrv', setHrvData);\r\n    fetchMeasurementData('rr', setRrData);\r\n  }, [id, authFetch, metricPeriod]); // metricPeriod가 변경될 때마다 재호출\r\n\r\n  // metricPeriod 선택 핸들러\r\n  const handleMetricPeriodChange = (event) => {\r\n    setMetricPeriod(event.target.value);\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"health-info-page\">\r\n      <div className=\"top-section\">\r\n        <h2>환자 심전도, HRV, RR 데이터</h2>\r\n\r\n        {/* metricPeriod 선택을 위한 드롭다운 */}\r\n        <div>\r\n          <label>기간 선택: </label>\r\n          <select value={metricPeriod} onChange={handleMetricPeriodChange}>\r\n            <option value=\"LAST_WEEK\">지난 주</option>\r\n            <option value=\"LAST_MONTH\">지난 달</option>\r\n            <option value=\"LAST_THREE_MONTHS\">지난 세 달</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* ECG 차트를 표시하는 컴포넌트 */}\r\n        <ECGChart ecgData={ecgData} dailyAverage={dailyAverage} />\r\n        {/* HRV 및 RR 차트를 유사하게 표시할 수 있습니다 */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthInfoPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}