{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\PatientList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport API_BASE_URL from './Config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientList = ({\n  searchTerm,\n  searchBy,\n  sortBy,\n  showFavorites\n}) => {\n  _s();\n  const {\n    authFetch\n  } = useContext(AuthContext);\n  const [patients, setPatients] = useState([]); // 환자 목록 저장\n  const [content, setContent] = useState([]); // 전체 content 저장\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPatients = async () => {\n      setLoading(true);\n      try {\n        let searchQuery = '';\n        if (searchTerm) {\n          searchQuery = searchBy === 'uuid' ? `&uuid=${searchTerm}` : `&name=${searchTerm}`;\n        }\n        const sortQuery = `${sortBy},${showFavorites ? 'desc' : 'asc'}`;\n        const response = await authFetch(`${API_BASE_URL}/doctor/patient?sort=${sortQuery}${searchQuery}`, {\n          method: 'GET'\n        });\n        console.log('Full Response:', response.data); // 전체 응답을 콘솔에 출력하여 확인\n        setPatients(response.data.content || []); // 응답이 없을 경우 빈 배열로 설정\n        setContent(response.data); // 전체 content를 저장\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n        setPatients([]); // 에러 발생 시 빈 배열로 설정\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPatients();\n  }, [searchTerm, searchBy, sortBy, showFavorites, authFetch]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  if (!patients || patients.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uC544\\uC9C1 \\uCF58\\uD150\\uCE20\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"patient-list\",\n      children: patients.map(patient => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"patient-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"UUID: \", patient.uuid || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC131\\uBCC4: \", patient.gender === 'FEMALE' ? '여성' : patient.gender === 'MALE' ? '남성' : 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC774\\uB984: \", patient.name || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC5F0\\uB77D\\uCC98: \", patient.phone || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC774\\uBA54\\uC77C: \", patient.email || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, patient.uuid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientList, \"e+RPfex0VhX0lvHKUw55WR9CNCg=\");\n_c = PatientList;\nexport default PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","API_BASE_URL","jsxDEV","_jsxDEV","PatientList","searchTerm","searchBy","sortBy","showFavorites","_s","authFetch","patients","setPatients","content","setContent","loading","setLoading","fetchPatients","searchQuery","sortQuery","response","method","console","log","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","patient","uuid","gender","name","phone","email","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/PatientList.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport API_BASE_URL from './Config';\r\n\r\nconst PatientList = ({ searchTerm, searchBy, sortBy, showFavorites }) => {\r\n  const { authFetch } = useContext(AuthContext);\r\n  const [patients, setPatients] = useState([]); // 환자 목록 저장\r\n  const [content, setContent] = useState([]); // 전체 content 저장\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchPatients = async () => {\r\n      setLoading(true);\r\n      try {\r\n        let searchQuery = '';\r\n        if (searchTerm) {\r\n          searchQuery = searchBy === 'uuid' ? `&uuid=${searchTerm}` : `&name=${searchTerm}`;\r\n        }\r\n\r\n        const sortQuery = `${sortBy},${showFavorites ? 'desc' : 'asc'}`;\r\n        const response = await authFetch(`${API_BASE_URL}/doctor/patient?sort=${sortQuery}${searchQuery}`, {\r\n          method: 'GET',\r\n        });\r\n\r\n        console.log('Full Response:', response.data); // 전체 응답을 콘솔에 출력하여 확인\r\n        setPatients(response.data.content || []); // 응답이 없을 경우 빈 배열로 설정\r\n        setContent(response.data); // 전체 content를 저장\r\n      } catch (error) {\r\n        console.error('Error fetching patients:', error);\r\n        setPatients([]); // 에러 발생 시 빈 배열로 설정\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPatients();\r\n  }, [searchTerm, searchBy, sortBy, showFavorites, authFetch]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (!patients || patients.length === 0) {\r\n    return <p>아직 콘텐츠가 없습니다.</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Patient List</h2>\r\n      <ul className=\"patient-list\">\r\n        {patients.map(patient => (\r\n          <li key={patient.uuid} className=\"patient-item\">\r\n            <p>UUID: {patient.uuid || 'N/A'}</p>\r\n            <p>성별: {patient.gender === 'FEMALE' ? '여성' : patient.gender === 'MALE' ? '남성' : 'N/A'}</p>\r\n            <p>이름: {patient.name || 'N/A'}</p>\r\n            <p>연락처: {patient.phone || 'N/A'}</p>\r\n            <p>이메일: {patient.email || 'N/A'}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,eAAe;AAC3C,OAAOC,YAAY,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAGA,CAAC;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM;IAAEC;EAAU,CAAC,GAAGX,UAAU,CAACC,WAAW,CAAC;EAC7C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMoB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCD,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAIE,WAAW,GAAG,EAAE;QACpB,IAAIb,UAAU,EAAE;UACda,WAAW,GAAGZ,QAAQ,KAAK,MAAM,GAAG,SAASD,UAAU,EAAE,GAAG,SAASA,UAAU,EAAE;QACnF;QAEA,MAAMc,SAAS,GAAG,GAAGZ,MAAM,IAAIC,aAAa,GAAG,MAAM,GAAG,KAAK,EAAE;QAC/D,MAAMY,QAAQ,GAAG,MAAMV,SAAS,CAAC,GAAGT,YAAY,wBAAwBkB,SAAS,GAAGD,WAAW,EAAE,EAAE;UACjGG,MAAM,EAAE;QACV,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;QAC9CZ,WAAW,CAACQ,QAAQ,CAACI,IAAI,CAACX,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;QAC1CC,UAAU,CAACM,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDb,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB,CAAC,SAAS;QACRI,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACZ,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,aAAa,EAAEE,SAAS,CAAC,CAAC;EAE5D,IAAIK,OAAO,EAAE;IACX,oBAAOZ,OAAA;MAAAuB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAI,CAACnB,QAAQ,IAAIA,QAAQ,CAACoB,MAAM,KAAK,CAAC,EAAE;IACtC,oBAAO5B,OAAA;MAAAuB,QAAA,EAAG;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC7B;EAEA,oBACE3B,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB3B,OAAA;MAAI6B,SAAS,EAAC,cAAc;MAAAN,QAAA,EACzBf,QAAQ,CAACsB,GAAG,CAACC,OAAO,iBACnB/B,OAAA;QAAuB6B,SAAS,EAAC,cAAc;QAAAN,QAAA,gBAC7CvB,OAAA;UAAAuB,QAAA,GAAG,QAAM,EAACQ,OAAO,CAACC,IAAI,IAAI,KAAK;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpC3B,OAAA;UAAAuB,QAAA,GAAG,gBAAI,EAACQ,OAAO,CAACE,MAAM,KAAK,QAAQ,GAAG,IAAI,GAAGF,OAAO,CAACE,MAAM,KAAK,MAAM,GAAG,IAAI,GAAG,KAAK;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1F3B,OAAA;UAAAuB,QAAA,GAAG,gBAAI,EAACQ,OAAO,CAACG,IAAI,IAAI,KAAK;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClC3B,OAAA;UAAAuB,QAAA,GAAG,sBAAK,EAACQ,OAAO,CAACI,KAAK,IAAI,KAAK;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpC3B,OAAA;UAAAuB,QAAA,GAAG,sBAAK,EAACQ,OAAO,CAACK,KAAK,IAAI,KAAK;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAL7BI,OAAO,CAACC,IAAI;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrB,EAAA,CA1DIL,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AA4DjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}