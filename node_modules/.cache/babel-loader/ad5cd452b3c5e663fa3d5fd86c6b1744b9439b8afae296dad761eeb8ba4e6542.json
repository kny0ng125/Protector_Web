{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\Patient_Info\\\\HealthCharts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom'; // 환자 ID를 URL에서 가져오기 위해 사용\nimport { AuthContext } from '../AuthContext'; // 인증된 요청을 위해 AuthContext 사용\nimport ECGChart from '../Chart/ECGChart'; // ECGChart 컴포넌트 임포트\nimport API_BASE_URL from '../Config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthCharts = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 환자 ID를 가져옵니다.\n  const {\n    authFetch\n  } = useContext(AuthContext); // 인증된 요청을 위해 authFetch를 사용합니다.\n  const [ecgData, setEcgData] = useState(null); // ECG 데이터 상태\n  const [dailyAverage, setDailyAverage] = useState(null); // 일일 평균 데이터 상태\n  const [loading, setLoading] = useState(true); // 로딩 상태\n\n  useEffect(() => {\n    const fetchECGData = async () => {\n      try {\n        const response = await authFetch(`${API_BASE_URL}/doctor/ecg/${id}?page=0&size=5&metricPeriod=LAST_MONTH`,\n        // API 호출\n        {\n          method: 'GET'\n        });\n        if (response.status === 200) {\n          const data = response.data;\n          setEcgData(data.ecgList);\n          setDailyAverage(data.dailyAverage);\n        } else {\n          console.error('Failed to fetch ECG data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching ECG data:', error);\n      } finally {\n        setLoading(false); // 로딩 완료\n      }\n    };\n    fetchECGData();\n  }, [id, authFetch]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n  if (!ecgData || !dailyAverage) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"ECG \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC62C \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ECGChart, {\n      ecgData: ecgData,\n      dailyAverage: dailyAverage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthCharts, \"I7dhOwYIwUA2j4bNgKM7QZTrfWM=\", false, function () {\n  return [useParams];\n});\n_c = HealthCharts;\nexport default HealthCharts;\nvar _c;\n$RefreshReg$(_c, \"HealthCharts\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","AuthContext","ECGChart","API_BASE_URL","jsxDEV","_jsxDEV","HealthCharts","_s","id","authFetch","ecgData","setEcgData","dailyAverage","setDailyAverage","loading","setLoading","fetchECGData","response","method","status","data","ecgList","console","error","statusText","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Patient_Info/HealthCharts.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom'; // 환자 ID를 URL에서 가져오기 위해 사용\r\nimport { AuthContext } from '../AuthContext'; // 인증된 요청을 위해 AuthContext 사용\r\nimport ECGChart from '../Chart/ECGChart'; // ECGChart 컴포넌트 임포트\r\nimport API_BASE_URL from '../Config';\r\n\r\nconst HealthCharts = () => {\r\n  const { id } = useParams(); // URL에서 환자 ID를 가져옵니다.\r\n  const { authFetch } = useContext(AuthContext); // 인증된 요청을 위해 authFetch를 사용합니다.\r\n  const [ecgData, setEcgData] = useState(null); // ECG 데이터 상태\r\n  const [dailyAverage, setDailyAverage] = useState(null); // 일일 평균 데이터 상태\r\n  const [loading, setLoading] = useState(true); // 로딩 상태\r\n\r\n  useEffect(() => {\r\n    const fetchECGData = async () => {\r\n      try {\r\n        const response = await authFetch(\r\n          `${API_BASE_URL}/doctor/ecg/${id}?page=0&size=5&metricPeriod=LAST_MONTH`, // API 호출\r\n          {\r\n            method: 'GET',\r\n          }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n          const data = response.data;\r\n          setEcgData(data.ecgList);\r\n          setDailyAverage(data.dailyAverage);\r\n        } else {\r\n          console.error('Failed to fetch ECG data:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching ECG data:', error);\r\n      } finally {\r\n        setLoading(false); // 로딩 완료\r\n      }\r\n    };\r\n\r\n    fetchECGData();\r\n  }, [id, authFetch]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (!ecgData || !dailyAverage) {\r\n    return <p>ECG 데이터를 불러올 수 없습니다.</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ECGChart ecgData={ecgData} dailyAverage={dailyAverage} /> {/* ECGChart에 데이터 전달 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthCharts;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,SAASC,WAAW,QAAQ,gBAAgB,CAAC,CAAC;AAC9C,OAAOC,QAAQ,MAAM,mBAAmB,CAAC,CAAC;AAC1C,OAAOC,YAAY,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAG,CAAC,GAAGR,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM;IAAES;EAAU,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMkB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,SAAS,CAC9B,GAAGN,YAAY,eAAeK,EAAE,wCAAwC;QAAE;QAC1E;UACEU,MAAM,EAAE;QACV,CACF,CAAC;QAED,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAI;UAC1BT,UAAU,CAACS,IAAI,CAACC,OAAO,CAAC;UACxBR,eAAe,CAACO,IAAI,CAACR,YAAY,CAAC;QACpC,CAAC,MAAM;UACLU,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEN,QAAQ,CAACO,UAAU,CAAC;QACjE;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACR,EAAE,EAAEC,SAAS,CAAC,CAAC;EAEnB,IAAIK,OAAO,EAAE;IACX,oBAAOT,OAAA;MAAAoB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAI,CAACnB,OAAO,IAAI,CAACE,YAAY,EAAE;IAC7B,oBAAOP,OAAA;MAAAoB,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACpC;EAEA,oBACExB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA,CAACH,QAAQ;MAACQ,OAAO,EAAEA,OAAQ;MAACE,YAAY,EAAEA;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/CID,YAAY;EAAA,QACDN,SAAS;AAAA;AAAA8B,EAAA,GADpBxB,YAAY;AAiDlB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}