{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\PatientList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport API_BASE_URL from './Config';\nimport PatientItem from './PatientItem';\nimport './PatientList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientList = ({\n  searchTerm,\n  searchBy,\n  sortBy,\n  sortOrder,\n  showFavorites,\n  page,\n  onNextPage,\n  onPreviousPage,\n  triggerRefresh\n}) => {\n  _s();\n  const {\n    authFetch\n  } = useContext(AuthContext);\n  const [patients, setPatients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [totalPages, setTotalPages] = useState(1);\n  const fetchPatients = async () => {\n    setLoading(true);\n    try {\n      let searchQuery = '';\n      if (searchTerm) {\n        searchQuery = searchBy === 'uuid' ? `&uuid=${searchTerm}` : `&name=${searchTerm}`;\n      }\n      const sortQuery = `${sortBy},${sortOrder}`;\n      const baseUrl = showFavorites ? `${API_BASE_URL}/doctor/patient/favorite?page=${page}&size=5` : `${API_BASE_URL}/doctor/patient?page=${page}&size=5&sort=${sortQuery}${searchQuery}`;\n      const response = await authFetch(baseUrl, {\n        method: 'GET'\n      });\n      console.log('Full Response:', response.data);\n      setPatients(response.data.content || []);\n      setTotalPages(response.data.totalPages || 1);\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      setPatients([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPatients();\n  }, [searchTerm, searchBy, sortBy, sortOrder, showFavorites, page, authFetch, triggerRefresh]);\n  const toggleFavorite = async (patientId, isFavorite) => {\n    try {\n      const method = isFavorite ? 'DELETE' : 'POST';\n      const url = `${API_BASE_URL}/doctor/patient/favorite`;\n      const response = await authFetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          patientId\n        })\n      });\n      if (response.status === 200 || response.status === 201) {\n        fetchPatients();\n      } else {\n        const errorMessage = response.data ? response.data.message : '알 수 없는 오류가 발생했습니다';\n        console.error('즐겨찾기 변경 실패:', errorMessage);\n        if (errorMessage) {\n          alert(`오류: ${errorMessage}`);\n        }\n      }\n    } catch (error) {\n      console.error('즐겨찾기 변경 중 오류 발생:', error);\n      if (error.message) {\n        alert(`오류: ${error.message}`);\n      }\n    }\n  };\n  const deletePatient = async id => {\n    try {\n      const response = await authFetch(`${API_BASE_URL}/doctor/patient/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.status === 200 || response.status === 204) {\n        setPatients(prevPatients => prevPatients.filter(patient => patient.id !== id));\n      } else {\n        const errorMessage = response.data ? response.data.message : 'Unknown error occurred';\n        console.error('Failed to delete patient', errorMessage);\n        if (errorMessage) {\n          alert(`Error: ${errorMessage}`);\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting patient:', error);\n      if (error.message) {\n        alert(`Error: ${error.message}`);\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }, this);\n  }\n  if (!patients || patients.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB4F1\\uB85D\\uB41C \\uD658\\uC790\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-list\",\n    children: [patients.map(patient => /*#__PURE__*/_jsxDEV(PatientItem, {\n      patient: patient,\n      toggleFavorite: toggleFavorite,\n      deletePatient: deletePatient\n    }, patient.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [page > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onPreviousPage,\n        className: \"pagination-arrow\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pagination-info\",\n        children: [\"Page \", page + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), page < totalPages - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onNextPage,\n        className: \"pagination-arrow\",\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientList, \"a0WyVWZnTdEf3OdbSxXrABmpLMo=\");\n_c = PatientList;\nexport default PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","API_BASE_URL","PatientItem","jsxDEV","_jsxDEV","PatientList","searchTerm","searchBy","sortBy","sortOrder","showFavorites","page","onNextPage","onPreviousPage","triggerRefresh","_s","authFetch","patients","setPatients","loading","setLoading","totalPages","setTotalPages","fetchPatients","searchQuery","sortQuery","baseUrl","response","method","console","log","data","content","error","toggleFavorite","patientId","isFavorite","url","headers","body","JSON","stringify","status","errorMessage","message","alert","deletePatient","id","prevPatients","filter","patient","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/PatientList.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport API_BASE_URL from './Config';\r\nimport PatientItem from './PatientItem'; \r\nimport './PatientList.css';\r\n\r\nconst PatientList = ({ searchTerm, searchBy, sortBy, sortOrder, showFavorites, page, onNextPage, onPreviousPage, triggerRefresh }) => {\r\n  const { authFetch } = useContext(AuthContext);\r\n  const [patients, setPatients] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  const fetchPatients = async () => {\r\n    setLoading(true);\r\n    try {\r\n      let searchQuery = '';\r\n      if (searchTerm) {\r\n        searchQuery = searchBy === 'uuid' ? `&uuid=${searchTerm}` : `&name=${searchTerm}`;\r\n      }\r\n\r\n      const sortQuery = `${sortBy},${sortOrder}`;\r\n      const baseUrl = showFavorites \r\n        ? `${API_BASE_URL}/doctor/patient/favorite?page=${page}&size=5` \r\n        : `${API_BASE_URL}/doctor/patient?page=${page}&size=5&sort=${sortQuery}${searchQuery}`;\r\n\r\n      const response = await authFetch(baseUrl, {\r\n        method: 'GET',\r\n      });\r\n\r\n      console.log('Full Response:', response.data);\r\n      setPatients(response.data.content || []);\r\n      setTotalPages(response.data.totalPages || 1);\r\n    } catch (error) {\r\n      console.error('Error fetching patients:', error);\r\n      setPatients([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPatients();\r\n  }, [searchTerm, searchBy, sortBy, sortOrder, showFavorites, page, authFetch, triggerRefresh]);\r\n\r\n  const toggleFavorite = async (patientId, isFavorite) => {\r\n    try {\r\n      const method = isFavorite ? 'DELETE' : 'POST';\r\n      const url = `${API_BASE_URL}/doctor/patient/favorite`;\r\n      \r\n      const response = await authFetch(url, {\r\n        method: method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ patientId }),\r\n      });\r\n\r\n      if (response.status === 200 || response.status === 201) {\r\n        fetchPatients();\r\n      } else {\r\n        const errorMessage = response.data ? response.data.message : '알 수 없는 오류가 발생했습니다';\r\n        console.error('즐겨찾기 변경 실패:', errorMessage);\r\n        if (errorMessage) {\r\n          alert(`오류: ${errorMessage}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('즐겨찾기 변경 중 오류 발생:', error);\r\n      if (error.message) {\r\n        alert(`오류: ${error.message}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deletePatient = async (id) => {\r\n    try {\r\n      const response = await authFetch(`${API_BASE_URL}/doctor/patient/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.status === 200 || response.status === 204) {\r\n        setPatients(prevPatients => prevPatients.filter(patient => patient.id !== id));\r\n      } else {\r\n        const errorMessage = response.data ? response.data.message : 'Unknown error occurred';\r\n        console.error('Failed to delete patient', errorMessage);\r\n        if (errorMessage) {\r\n          alert(`Error: ${errorMessage}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting patient:', error);\r\n      if (error.message) {\r\n        alert(`Error: ${error.message}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (!patients || patients.length === 0) {\r\n    return <p>등록된 환자가 없습니다.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"patient-list\">\r\n      {patients.map(patient => (\r\n        <PatientItem\r\n          key={patient.id}\r\n          patient={patient}\r\n          toggleFavorite={toggleFavorite}\r\n          deletePatient={deletePatient}\r\n        />\r\n      ))}\r\n      <div className=\"pagination\">\r\n        {page > 0 && (\r\n          <button onClick={onPreviousPage} className=\"pagination-arrow\">\r\n            &larr;\r\n          </button>\r\n        )}\r\n        <span className=\"pagination-info\">Page {page + 1}</span>\r\n        {page < totalPages - 1 && (\r\n          <button onClick={onNextPage} className=\"pagination-arrow\">\r\n            &rarr;\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}