{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\PatientList.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientList = ({\n  patients,\n  searchTerm,\n  searchBy,\n  sortBy,\n  showFavorites\n}) => {\n  // 필터링 및 정렬 로직을 추가합니다.\n  const filteredPatients = patients.filter(patient => {\n    if (searchBy === 'name') {\n      return patient.identifier.toLowerCase().includes(searchTerm.toLowerCase());\n    }\n    if (searchBy === 'id') {\n      return patient.id.toString().includes(searchTerm);\n    }\n    return true;\n  }).sort((a, b) => {\n    if (sortBy === 'name') {\n      return a.identifier.localeCompare(b.identifier);\n    }\n    if (sortBy === 'id') {\n      return a.id - b.id;\n    }\n    // 다른 정렬 기준 추가 가능\n    return 0;\n  });\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"patient-list\",\n    children: filteredPatients.map(patient => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"patient-item\",\n      children: [patient.identifier, \" (ID: \", patient.id, \")\"]\n    }, patient.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = PatientList;\nexport default PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PatientList","patients","searchTerm","searchBy","sortBy","showFavorites","filteredPatients","filter","patient","identifier","toLowerCase","includes","id","toString","sort","a","b","localeCompare","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/PatientList.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst PatientList = ({ patients, searchTerm, searchBy, sortBy, showFavorites }) => {\r\n  // 필터링 및 정렬 로직을 추가합니다.\r\n  const filteredPatients = patients\r\n    .filter(patient => {\r\n      if (searchBy === 'name') {\r\n        return patient.identifier.toLowerCase().includes(searchTerm.toLowerCase());\r\n      }\r\n      if (searchBy === 'id') {\r\n        return patient.id.toString().includes(searchTerm);\r\n      }\r\n      return true;\r\n    })\r\n    .sort((a, b) => {\r\n      if (sortBy === 'name') {\r\n        return a.identifier.localeCompare(b.identifier);\r\n      }\r\n      if (sortBy === 'id') {\r\n        return a.id - b.id;\r\n      }\r\n      // 다른 정렬 기준 추가 가능\r\n      return 0;\r\n    });\r\n\r\n  return (\r\n    <ul className=\"patient-list\">\r\n      {filteredPatients.map(patient => (\r\n        <li key={patient.id} className=\"patient-item\">\r\n          {patient.identifier} (ID: {patient.id})\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EACjF;EACA,MAAMC,gBAAgB,GAAGL,QAAQ,CAC9BM,MAAM,CAACC,OAAO,IAAI;IACjB,IAAIL,QAAQ,KAAK,MAAM,EAAE;MACvB,OAAOK,OAAO,CAACC,UAAU,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC;IAC5E;IACA,IAAIP,QAAQ,KAAK,IAAI,EAAE;MACrB,OAAOK,OAAO,CAACI,EAAE,CAACC,QAAQ,CAAC,CAAC,CAACF,QAAQ,CAACT,UAAU,CAAC;IACnD;IACA,OAAO,IAAI;EACb,CAAC,CAAC,CACDY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACd,IAAIZ,MAAM,KAAK,MAAM,EAAE;MACrB,OAAOW,CAAC,CAACN,UAAU,CAACQ,aAAa,CAACD,CAAC,CAACP,UAAU,CAAC;IACjD;IACA,IAAIL,MAAM,KAAK,IAAI,EAAE;MACnB,OAAOW,CAAC,CAACH,EAAE,GAAGI,CAAC,CAACJ,EAAE;IACpB;IACA;IACA,OAAO,CAAC;EACV,CAAC,CAAC;EAEJ,oBACEb,OAAA;IAAImB,SAAS,EAAC,cAAc;IAAAC,QAAA,EACzBb,gBAAgB,CAACc,GAAG,CAACZ,OAAO,iBAC3BT,OAAA;MAAqBmB,SAAS,EAAC,cAAc;MAAAC,QAAA,GAC1CX,OAAO,CAACC,UAAU,EAAC,QAAM,EAACD,OAAO,CAACI,EAAE,EAAC,GACxC;IAAA,GAFSJ,OAAO,CAACI,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEf,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAET,CAAC;AAACC,EAAA,GAhCIzB,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}