{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\PatientList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport API_BASE_URL from './Config';\nimport PatientItem from './PatientItem'; // PatientItem을 참조합니다.\nimport './PatientList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientList = ({\n  searchTerm,\n  searchBy,\n  sortBy,\n  showFavorites\n}) => {\n  _s();\n  const {\n    authFetch\n  } = useContext(AuthContext);\n  const [patients, setPatients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPatients = async () => {\n      setLoading(true);\n      try {\n        let searchQuery = '';\n        if (searchTerm) {\n          searchQuery = searchBy === 'uuid' ? `&uuid=${searchTerm}` : `&name=${searchTerm}`;\n        }\n        const sortQuery = `${sortBy},${showFavorites ? 'desc' : 'asc'}`;\n        const response = await authFetch(`${API_BASE_URL}/doctor/patient?sort=${sortQuery}${searchQuery}`, {\n          method: 'GET'\n        });\n        console.log('Full Response:', response.data);\n        setPatients(response.data.content || []);\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n        setPatients([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPatients();\n  }, [searchTerm, searchBy, sortBy, showFavorites, authFetch]);\n  const toggleFavorite = async patientId => {\n    // 즐겨찾기 토글 로직 (API를 통한 업데이트 등)\n  };\n  const deletePatient = async uuid => {\n    try {\n      const response = await authFetch(`${API_BASE_URL}/doctor/patient/${uuid}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setPatients(prevPatients => prevPatients.filter(patient => patient.uuid !== uuid));\n      } else {\n        console.error('Failed to delete patient');\n      }\n    } catch (error) {\n      console.error('Error deleting patient:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  if (!patients || patients.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uC544\\uC9C1 \\uCF58\\uD150\\uCE20\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-list\",\n    children: patients.map(patient => /*#__PURE__*/_jsxDEV(PatientItem, {\n      patient: patient,\n      toggleFavorite: toggleFavorite,\n      deletePatient: deletePatient\n    }, patient.uuid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientList, \"Ubh+KtJmJfixpR/71LGB57ErHUI=\");\n_c = PatientList;\nexport default PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","API_BASE_URL","PatientItem","jsxDEV","_jsxDEV","PatientList","searchTerm","searchBy","sortBy","showFavorites","_s","authFetch","patients","setPatients","loading","setLoading","fetchPatients","searchQuery","sortQuery","response","method","console","log","data","content","error","toggleFavorite","patientId","deletePatient","uuid","ok","prevPatients","filter","patient","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/PatientList.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport API_BASE_URL from './Config';\r\nimport PatientItem from './PatientItem'; // PatientItem을 참조합니다.\r\nimport './PatientList.css';\r\n\r\nconst PatientList = ({ searchTerm, searchBy, sortBy, showFavorites }) => {\r\n  const { authFetch } = useContext(AuthContext);\r\n  const [patients, setPatients] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchPatients = async () => {\r\n      setLoading(true);\r\n      try {\r\n        let searchQuery = '';\r\n        if (searchTerm) {\r\n          searchQuery = searchBy === 'uuid' ? `&uuid=${searchTerm}` : `&name=${searchTerm}`;\r\n        }\r\n\r\n        const sortQuery = `${sortBy},${showFavorites ? 'desc' : 'asc'}`;\r\n        const response = await authFetch(`${API_BASE_URL}/doctor/patient?sort=${sortQuery}${searchQuery}`, {\r\n          method: 'GET',\r\n        });\r\n\r\n        console.log('Full Response:', response.data);\r\n        setPatients(response.data.content || []);\r\n      } catch (error) {\r\n        console.error('Error fetching patients:', error);\r\n        setPatients([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPatients();\r\n  }, [searchTerm, searchBy, sortBy, showFavorites, authFetch]);\r\n\r\n  const toggleFavorite = async (patientId) => {\r\n    // 즐겨찾기 토글 로직 (API를 통한 업데이트 등)\r\n  };\r\n\r\n  const deletePatient = async (uuid) => {\r\n    try {\r\n      const response = await authFetch(`${API_BASE_URL}/doctor/patient/${uuid}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.ok) {\r\n        setPatients(prevPatients => prevPatients.filter(patient => patient.uuid !== uuid));\r\n      } else {\r\n        console.error('Failed to delete patient');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting patient:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (!patients || patients.length === 0) {\r\n    return <p>아직 콘텐츠가 없습니다.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"patient-list\">\r\n      {patients.map(patient => (\r\n        <PatientItem\r\n          key={patient.uuid}\r\n          patient={patient}\r\n          toggleFavorite={toggleFavorite}\r\n          deletePatient={deletePatient}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,eAAe;AAC3C,OAAOC,YAAY,MAAM,UAAU;AACnC,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AACzC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM;IAAEC;EAAU,CAAC,GAAGZ,UAAU,CAACC,WAAW,CAAC;EAC7C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMmB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCD,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAIE,WAAW,GAAG,EAAE;QACpB,IAAIX,UAAU,EAAE;UACdW,WAAW,GAAGV,QAAQ,KAAK,MAAM,GAAG,SAASD,UAAU,EAAE,GAAG,SAASA,UAAU,EAAE;QACnF;QAEA,MAAMY,SAAS,GAAG,GAAGV,MAAM,IAAIC,aAAa,GAAG,MAAM,GAAG,KAAK,EAAE;QAC/D,MAAMU,QAAQ,GAAG,MAAMR,SAAS,CAAC,GAAGV,YAAY,wBAAwBiB,SAAS,GAAGD,WAAW,EAAE,EAAE;UACjGG,MAAM,EAAE;QACV,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACI,IAAI,CAAC;QAC5CV,WAAW,CAACM,QAAQ,CAACI,IAAI,CAACC,OAAO,IAAI,EAAE,CAAC;MAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDZ,WAAW,CAAC,EAAE,CAAC;MACjB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACV,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,aAAa,EAAEE,SAAS,CAAC,CAAC;EAE5D,MAAMe,cAAc,GAAG,MAAOC,SAAS,IAAK;IAC1C;EAAA,CACD;EAED,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;IACpC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMR,SAAS,CAAC,GAAGV,YAAY,mBAAmB4B,IAAI,EAAE,EAAE;QACzET,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAID,QAAQ,CAACW,EAAE,EAAE;QACfjB,WAAW,CAACkB,YAAY,IAAIA,YAAY,CAACC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACJ,IAAI,KAAKA,IAAI,CAAC,CAAC;MACpF,CAAC,MAAM;QACLR,OAAO,CAACI,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,IAAIX,OAAO,EAAE;IACX,oBAAOV,OAAA;MAAA8B,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAI,CAAC1B,QAAQ,IAAIA,QAAQ,CAAC2B,MAAM,KAAK,CAAC,EAAE;IACtC,oBAAOnC,OAAA;MAAA8B,QAAA,EAAG;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC7B;EAEA,oBACElC,OAAA;IAAKoC,SAAS,EAAC,cAAc;IAAAN,QAAA,EAC1BtB,QAAQ,CAAC6B,GAAG,CAACR,OAAO,iBACnB7B,OAAA,CAACF,WAAW;MAEV+B,OAAO,EAAEA,OAAQ;MACjBP,cAAc,EAAEA,cAAe;MAC/BE,aAAa,EAAEA;IAAc,GAHxBK,OAAO,CAACJ,IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIlB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAxEIL,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AA0EjB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}