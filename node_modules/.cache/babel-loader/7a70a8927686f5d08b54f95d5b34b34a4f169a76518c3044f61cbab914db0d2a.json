{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17Z90R\\\\protector_client\\\\src\\\\Components\\\\Patient_Info\\\\HealthInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom'; // useParams 훅을 가져옵니다.\nimport PatientInfo from './PatientInfo';\nimport Calendar from './Calendar';\nimport SearchAndList from './SearchAndList';\nimport HealthCharts from './HealthCharts';\nimport './HealthInfoPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthInfoPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 환자 id를 가져옵니다.\n  const [patientData, setPatientData] = useState(null); // 환자 데이터를 저장할 상태를 정의합니다.\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // id를 사용하여 API 호출을 통해 환자 데이터를 가져옵니다.\n    const fetchPatientData = async () => {\n      try {\n        const response = await fetch(`API_BASE_URL/patient/${id}`); // 적절한 API URL로 변경하세요.\n        const data = await response.json();\n        setPatientData(data); // 받아온 환자 데이터를 상태에 저장합니다.\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPatientData();\n  }, [id]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  if (!patientData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uD658\\uC790 \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uC9C0 \\uBABB\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"health-info-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: [/*#__PURE__*/_jsxDEV(PatientInfo, {\n        patient: patientData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Calendar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchAndList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HealthCharts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthInfoPage, \"4E4FLI4MOUWOulOCUTCEiAXPKVU=\", false, function () {\n  return [useParams];\n});\n_c = HealthInfoPage;\nexport default HealthInfoPage;\nvar _c;\n$RefreshReg$(_c, \"HealthInfoPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","PatientInfo","Calendar","SearchAndList","HealthCharts","jsxDEV","_jsxDEV","HealthInfoPage","_s","id","patientData","setPatientData","loading","setLoading","fetchPatientData","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","patient","_c","$RefreshReg$"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Patient_Info/HealthInfoPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom'; // useParams 훅을 가져옵니다.\r\nimport PatientInfo from './PatientInfo';\r\nimport Calendar from './Calendar';\r\nimport SearchAndList from './SearchAndList';\r\nimport HealthCharts from './HealthCharts';\r\nimport './HealthInfoPage.css';\r\n\r\nconst HealthInfoPage = () => {\r\n  const { id } = useParams(); // URL에서 환자 id를 가져옵니다.\r\n  const [patientData, setPatientData] = useState(null); // 환자 데이터를 저장할 상태를 정의합니다.\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // id를 사용하여 API 호출을 통해 환자 데이터를 가져옵니다.\r\n    const fetchPatientData = async () => {\r\n      try {\r\n        const response = await fetch(`API_BASE_URL/patient/${id}`); // 적절한 API URL로 변경하세요.\r\n        const data = await response.json();\r\n        setPatientData(data); // 받아온 환자 데이터를 상태에 저장합니다.\r\n      } catch (error) {\r\n        console.error('Error fetching patient data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPatientData();\r\n  }, [id]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (!patientData) {\r\n    return <p>환자 데이터를 불러오지 못했습니다.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"health-info-page\">\r\n      <div className=\"top-section\">\r\n        <PatientInfo patient={patientData} /> {/* 환자 데이터를 전달합니다. */}\r\n        <Calendar />\r\n        <SearchAndList />\r\n      </div>\r\n      <HealthCharts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthInfoPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwBP,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5D,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCP,cAAc,CAACM,IAAI,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACL,EAAE,CAAC,CAAC;EAER,IAAIG,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAe,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAI,CAACf,WAAW,EAAE;IAChB,oBAAOJ,OAAA;MAAAe,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnC;EAEA,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,kBAAkB;IAAAL,QAAA,gBAC/Bf,OAAA;MAAKoB,SAAS,EAAC,aAAa;MAAAL,QAAA,gBAC1Bf,OAAA,CAACL,WAAW;QAAC0B,OAAO,EAAEjB;MAAY;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eACtCnB,OAAA,CAACJ,QAAQ;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZnB,OAAA,CAACH,aAAa;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,eACNnB,OAAA,CAACF,YAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAACjB,EAAA,CAxCID,cAAc;EAAA,QACHP,SAAS;AAAA;AAAA4B,EAAA,GADpBrB,cAAc;AA0CpB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}