{"ast":null,"code":"// 수락 버튼 클릭 핸들러\nconst handleAccept = async licenseNumber => {\n  try {\n    console.log('Accepting license:', licenseNumber);\n\n    // 명확한 JSON 형식으로 요청 본문 구성\n    const body = JSON.stringify({\n      licenseNumber: licenseNumber\n    });\n    console.log('Request Body (Accept):', body); // Body 구성 확인\n\n    const response = await authFetch(`${API_BASE_URL}/doctor/hospital/11/member/accept`, {\n      method: 'POST',\n      body: body // 명확한 JSON 형식으로 전송\n    });\n    if (response.status === 200) {\n      alert('요청이 수락되었습니다.');\n      window.location.reload(); // 페이지 새로고침\n    } else {\n      console.error('수락 중 오류 발생:', response);\n      alert('수락에 실패했습니다.');\n    }\n  } catch (error) {\n    console.error('수락 중 오류 발생:', error);\n    alert('오류가 발생했습니다.');\n  }\n};\n\n// 거절 버튼 클릭 핸들러\nconst handleDecline = async licenseNumber => {\n  try {\n    console.log('Declining license:', licenseNumber);\n\n    // 명확한 JSON 형식으로 요청 본문 구성\n    const body = JSON.stringify({\n      licenseNumber: licenseNumber\n    });\n    console.log('Request Body (Decline):', body); // Body 구성 확인\n\n    const response = await authFetch(`${API_BASE_URL}/doctor/hospital/11/member/decline`, {\n      method: 'POST',\n      body: body // 명확한 JSON 형식으로 전송\n    });\n    if (response.status === 200) {\n      alert('요청이 거절되었습니다.');\n      window.location.reload(); // 페이지 새로고침\n    } else {\n      console.error('거절 중 오류 발생:', response);\n      alert('거절에 실패했습니다.');\n    }\n  } catch (error) {\n    console.error('거절 중 오류 발생:', error);\n    alert('오류가 발생했습니다.');\n  }\n};","map":{"version":3,"names":["handleAccept","licenseNumber","console","log","body","JSON","stringify","response","authFetch","API_BASE_URL","method","status","alert","window","location","reload","error","handleDecline"],"sources":["C:/Users/17Z90R/protector_client/src/Components/Hospital_Manage/HospitalRequestModal.js"],"sourcesContent":["// 수락 버튼 클릭 핸들러\r\nconst handleAccept = async (licenseNumber) => {\r\n    try {\r\n      console.log('Accepting license:', licenseNumber);\r\n  \r\n      // 명확한 JSON 형식으로 요청 본문 구성\r\n      const body = JSON.stringify({ licenseNumber: licenseNumber });\r\n      console.log('Request Body (Accept):', body); // Body 구성 확인\r\n  \r\n      const response = await authFetch(`${API_BASE_URL}/doctor/hospital/11/member/accept`, {\r\n        method: 'POST',\r\n        body: body, // 명확한 JSON 형식으로 전송\r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        alert('요청이 수락되었습니다.');\r\n        window.location.reload(); // 페이지 새로고침\r\n      } else {\r\n        console.error('수락 중 오류 발생:', response);\r\n        alert('수락에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('수락 중 오류 발생:', error);\r\n      alert('오류가 발생했습니다.');\r\n    }\r\n  };\r\n  \r\n  // 거절 버튼 클릭 핸들러\r\n  const handleDecline = async (licenseNumber) => {\r\n    try {\r\n      console.log('Declining license:', licenseNumber);\r\n  \r\n      // 명확한 JSON 형식으로 요청 본문 구성\r\n      const body = JSON.stringify({ licenseNumber: licenseNumber });\r\n      console.log('Request Body (Decline):', body); // Body 구성 확인\r\n  \r\n      const response = await authFetch(`${API_BASE_URL}/doctor/hospital/11/member/decline`, {\r\n        method: 'POST',\r\n        body: body, // 명확한 JSON 형식으로 전송\r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        alert('요청이 거절되었습니다.');\r\n        window.location.reload(); // 페이지 새로고침\r\n      } else {\r\n        console.error('거절 중 오류 발생:', response);\r\n        alert('거절에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('거절 중 오류 발생:', error);\r\n      alert('오류가 발생했습니다.');\r\n    }\r\n  };\r\n  "],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,MAAOC,aAAa,IAAK;EAC1C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,aAAa,CAAC;;IAEhD;IACA,MAAMG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEL,aAAa,EAAEA;IAAc,CAAC,CAAC;IAC7DC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,IAAI,CAAC,CAAC,CAAC;;IAE7C,MAAMG,QAAQ,GAAG,MAAMC,SAAS,CAAC,GAAGC,YAAY,mCAAmC,EAAE;MACnFC,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEA,IAAI,CAAE;IACd,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MAC3BC,KAAK,CAAC,cAAc,CAAC;MACrBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,MAAM;MACLb,OAAO,CAACc,KAAK,CAAC,aAAa,EAAET,QAAQ,CAAC;MACtCK,KAAK,CAAC,aAAa,CAAC;IACtB;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnCJ,KAAK,CAAC,aAAa,CAAC;EACtB;AACF,CAAC;;AAED;AACA,MAAMK,aAAa,GAAG,MAAOhB,aAAa,IAAK;EAC7C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,aAAa,CAAC;;IAEhD;IACA,MAAMG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEL,aAAa,EAAEA;IAAc,CAAC,CAAC;IAC7DC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAAC,CAAC,CAAC;;IAE9C,MAAMG,QAAQ,GAAG,MAAMC,SAAS,CAAC,GAAGC,YAAY,oCAAoC,EAAE;MACpFC,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEA,IAAI,CAAE;IACd,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MAC3BC,KAAK,CAAC,cAAc,CAAC;MACrBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,MAAM;MACLb,OAAO,CAACc,KAAK,CAAC,aAAa,EAAET,QAAQ,CAAC;MACtCK,KAAK,CAAC,aAAa,CAAC;IACtB;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnCJ,KAAK,CAAC,aAAa,CAAC;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}